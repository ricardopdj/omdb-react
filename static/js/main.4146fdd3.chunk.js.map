{"version":3,"sources":["OMDbAPI.js","Titles.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["searchByTitle","title","page","fetch","concat","then","res","json","catch","err","Titles","props","react_default","a","createElement","Row","list","map","index","Col","key","sm","className","Card","Poster","CardImg","top","src","alt","Title","CardBody","CardText","App","state","currentTitle","titles","totalResults","activePage","totalPages","apiError","searching","search","arguments","length","undefined","_this","setState","clearContent","OMDbAPI","result","setContent","Search","pageNumber","this","_React$createElement","_this2","Container","lib","time","handler","Input","bsSize","placeholder","aria-label","onChange","event","target","value","Pagination_default","itemsCountPerPage","totalItemsCount","pageRangeDisplayed","handlePageChange","bind","itemClass","linkClass","activeLinkClass","prevPageText","nextPageText","Object","defineProperty","react_spinners","sizeUnit","size","color","loading","src_Titles","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.4146fdd3.chunk.js","sourcesContent":["const api = \"http://www.omdbapi.com/?apikey=576f8801\";\r\n\r\nexport const searchByTitle = (title, page) => fetch(`${api}&s=${title}&page=${page}`)\r\n    .then(res => res.json())\r\n    .catch(err => { throw err });\r\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {\n  Row,\n  Col,\n  Card,\n  CardText,\n  CardImg,\n  CardBody\n} from 'reactstrap';\n\n\nconst Titles = (props) => {\n\n    const getInfo = (venue) => {\n        props.onGetInfo(venue);\n    }\n\n    return (\n        <Row>\n          {\n            props.list.map((title, index) =>\n            <Col key={index} sm=\"3\" className=\"mb-5\">\n                <Card className=\"title\">\n                    {\n                      title.Poster !== 'N/A' ? (\n                        <CardImg className=\"img-fluid\" top src={title.Poster} alt={title.Title}/>\n                      ) : (\n                        <div className=\"py-5 text-center\">\n                          <span>Sorry, no image found!</span>\n                        </div>\n                      )\n                    }\n                    <CardBody className=\"d-flex align-items-end\">\n                        <CardText className=\"title-name\">{title.Title}</CardText>\n                    </CardBody>\n                </Card>\n            </Col>\n            )\n          }\n        </Row>\n\n    )\n}\n\n// Titles.propTypes = {\n//     venues: PropTypes.array.isRequired,\n//     onSearch: PropTypes.func.isRequired,\n//     onGetInfo: PropTypes.func.isRequired\n// }\n\nexport default Titles","import React, {Component} from 'react'\nimport logo from './logo.svg'\nimport './App.css'\nimport * as OMDbAPI from './OMDbAPI'\nimport {Debounce} from 'react-throttle'\nimport Pagination from \"react-js-pagination\"\nimport {\n    Container,\n    Row,\n    Col,\n    Input\n} from 'reactstrap'\nimport Titles from './Titles'\nimport { BeatLoader } from 'react-spinners';\n\nclass App extends Component {\n    state = {\n        currentTitle: '',\n        titles: [],\n        totalResults: 0,\n        activePage: 1,\n        totalPages: null,\n        apiError: false,\n        searching: false\n    }\n\n    search = (title, page = 1) => {\n        this.setState({searching: true});\n\n        if (title !== this.state.currentTitle) {\n            this.clearContent();\n        }\n\n        if (title) {\n            this.setState({currentTitle: title});\n\n            OMDbAPI\n                .searchByTitle(title, page)\n                .then((result) => {\n                    this.setContent(result);\n                })\n                .catch(() => {\n                    this.setState({apiError: true, searching: false})\n                });\n        } else {\n            this.clearContent();\n        }\n\n    }\n\n    setContent = (result) => {\n        if (result.totalResults) {\n            this.setState({\n                titles: result.Search,\n                totalResults: result.totalResults,\n                totalPages: (result.totalResults / 10),\n                searching: false\n            });\n        }\n    }\n\n    clearContent = () => {\n        this.setState({currentTitle: '', titles: [], totalResults: 0, activePage: 1, totalPages: null});\n    }\n\n    handlePageChange(pageNumber) {\n        this.setState({activePage: pageNumber});\n        this.search(this.state.currentTitle, pageNumber);\n    }\n\n    render() {\n        return (\n            <Container className=\"py-5\">\n                <h1 className=\"text-center\">OMDB search</h1>\n                <Row className=\"mt-3 mb-5\">\n                    <Col>\n                        <Debounce time=\"400\" handler=\"onChange\">\n                            <Input\n                                bsSize=\"lg\"\n                                placeholder=\"Search movie, series or episodes\"\n                                aria-label=\"Type a movie, series or episode name to search\"\n                                onChange={(event) => this.search(event.target.value)}/>\n                        </Debounce>\n                    </Col>\n                </Row>\n\n                {this.state.totalResults > 0 &&\n                <Row>\n                    <Col>\n                        <Pagination\n                            activePage={this.state.activePage}\n                            itemsCountPerPage={10}\n                            totalItemsCount={this.state.totalResults}\n                            pageRangeDisplayed={5}\n                            onChange={this\n                            .handlePageChange\n                            .bind(this)}\n                            itemClass=\"page-item\"\n                            linkClass=\"page-link\"\n                            activeLinkClass=\"active\"\n                            prevPageText=\"Prev\"\n                            nextPageText=\"Next\"\n                            pageRangeDisplayed=\"5\"\n                            hideDisabled={true}/>\n                    </Col>\n                </Row>\n                }\n\n\n                <div className=\"text-center\">\n                    <BeatLoader\n                    sizeUnit={\"px\"}\n                    size={30}\n                    color={'#D8DBE2'}\n                    loading={this.state.searching}\n                    />\n                </div>\n\n                {this.state.totalResults > 0 && !this.state.searching && <Titles list={this.state.titles}/>}\n            </Container>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}