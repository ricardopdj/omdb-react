{"version":3,"sources":["OMDbAPI.js","Titles.js","TitleModal.js","App.js","serviceWorker.js","index.js"],"names":["api","searchByTitle","title","page","fetch","concat","then","res","json","catch","err","searchByID","id","Titles","_React$createElement","_this","this","_this$props","props","titles","activePage","totalItemsCount","error","react_default","a","createElement","Row","className","Col","react_csv","data","separator","map","index","key","sm","Card","onClick","onGetInfo","imdbID","CardImg","top","src","Poster","alt","Title","CardBody","CardText","Pagination_default","itemsCountPerPage","pageRangeDisplayed","onChange","onPageChange","bind","itemClass","linkClass","activeLinkClass","prevPageText","nextPageText","Object","defineProperty","Component","TitleModal","toggle","onToggle","isOpen","Modal","ModalHeader","ModalBody","Plot","Director","Actors","Genre","Released","Runtime","Country","Ratings","rating","Source","Value","href","target","rel","ModalFooter","Button","color","App","state","currentTitle","totalResults","totalPages","apiError","apiErrorMsg","searching","modal","modalContent","modalToggle","setState","search","arguments","length","undefined","clearContent","OMDbAPI","result","Response","setContent","setError","getTitleInfo","Search","Error","handlePageChange","pageNumber","_this2","Container","lib","time","handler","Input","bsSize","placeholder","aria-label","event","value","react_spinners","sizeUnit","size","loading","src_Titles","src_TitleModal","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ec40eed4.chunk.js","sourcesContent":["const api = \"https://www.omdbapi.com/?apikey=576f8801\";\r\n\r\nexport const searchByTitle = (title, page) => fetch(`${api}&s=${title}&page=${page}`)\r\n    .then(res => res.json())\r\n    .catch(err => {\r\n        throw err\r\n    });\r\n\r\nexport const searchByID = (id) => fetch(`${api}&i=${id}`)\r\n    .then(res => res.json())\r\n    .catch(err => {\r\n        throw err\r\n    });\r\n","import React, {Component} from 'react'\r\nimport {\r\n    Row,\r\n    Col,\r\n    Card,\r\n    CardText,\r\n    CardImg,\r\n    CardBody\r\n} from 'reactstrap';\r\nimport Pagination from \"react-js-pagination\"\r\nimport {CSVLink} from \"react-csv\";\r\n\r\nclass Titles extends Component {\r\n\r\n    render() {\r\n        const {titles, activePage, totalItemsCount, error} = this.props\r\n\r\n        return (\r\n            <div>\r\n                {/* CSV export Component */}\r\n                {!error && <Row className=\"mb-3\">\r\n                    <Col>\r\n                        <CSVLink data={titles} separator={\";\"} className=\"btn bg-secondary\">Export to CSV</CSVLink>\r\n                    </Col>\r\n                </Row>\r\n                }\r\n\r\n                <Row>\r\n                    {/* Show Titles as Cards */}\r\n                    {titles.map((title, index) => <Col key={index} sm=\"3\" className=\"mb-5\">\r\n                        <Card className=\"title\" onClick={() => this.props.onGetInfo(title.imdbID)}>\r\n                            <CardImg className=\"img-fluid\" top src={title.Poster} alt={title.Title}/>\r\n\r\n                            <CardBody className=\"d-flex align-items-end\">\r\n                                <CardText className=\"title-name\">{title.Title}</CardText>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>)\r\n                    }\r\n\r\n                    {/* Show Api error messages */}\r\n                    {error && <Col>{error}</Col>}\r\n                </Row>\r\n\r\n                {/* Pagination */}\r\n                {totalItemsCount > 0 && <Row>\r\n                    <Col>\r\n                        <Pagination\r\n                            activePage={activePage}\r\n                            itemsCountPerPage={10}\r\n                            totalItemsCount={totalItemsCount}\r\n                            pageRangeDisplayed={5}\r\n                            onChange={this\r\n                            .props\r\n                            .onPageChange\r\n                            .bind(this)}\r\n                            itemClass=\"page-item\"\r\n                            linkClass=\"page-link\"\r\n                            activeLinkClass=\"active\"\r\n                            prevPageText=\"Prev\"\r\n                            nextPageText=\"Next\"\r\n                            pageRangeDisplayed=\"5\"\r\n                            hideDisabled={true}/>\r\n                    </Col>\r\n                </Row>\r\n                }\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Titles","import React, {Component} from 'react'\r\nimport {Button, Modal, ModalHeader, ModalBody, ModalFooter} from 'reactstrap'\r\n\r\nclass TitleModal extends Component {\r\n\r\n    toggle = () => {\r\n        this\r\n            .props\r\n            .onToggle()\r\n    }\r\n\r\n    render() {\r\n        const {isOpen, title} = this.props\r\n\r\n        return (\r\n            <Modal isOpen={isOpen} toggle={this.toggle} className={this.props.className}>\r\n                <ModalHeader toggle={this.toggle}>{title.Title}</ModalHeader>\r\n                <ModalBody>\r\n                    <div className=\"text-center title\">\r\n                        {title.Poster !== 'N/A' && <img src={title.Poster} alt={title.Title} className=\"mb-3\"/>}\r\n                    </div>\r\n                    <div className=\"px-3\">\r\n                        <p>\r\n                            <strong>Plot</strong><br/>{title.Plot}</p>\r\n                        <p>\r\n                            <strong>Director</strong><br/>{title.Director}</p>\r\n                        <p>\r\n                            <strong>Actors</strong><br/>{title.Actors}</p>\r\n                        <p>\r\n                            <strong>Genre</strong><br/>{title.Genre}</p>\r\n                        <p>\r\n                            <strong>Release date</strong><br/>{title.Released}</p>\r\n                        <p>\r\n                            <strong>Runtime</strong><br/>{title.Runtime}</p>\r\n                        <p>\r\n                            <strong>Country</strong><br/>{title.Country}</p>\r\n                        <div className=\"pb-3\">\r\n                            <strong>Ratings</strong><br/>\r\n                            {\r\n                                title.Ratings.map((rating, index) =>\r\n                                    <div key={index}>{rating.Source}- {rating.Value}</div>\r\n                                )\r\n                            }\r\n                        </div>\r\n                        <p>\r\n                            <strong>On IMDB:</strong><br/>\r\n                            <a\r\n                                href={`http://imdb.com/title/${title.imdbID}`}\r\n                                target=\"_blank\"\r\n                                rel=\"noopener noreferrer\">http://imdb.com/title/{title.imdbID}</a>\r\n                        </p>\r\n                    </div>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button color=\"secondary\" onClick={this.toggle}>Close</Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TitleModal","import React, {Component} from 'react'\r\nimport './App.css'\r\nimport * as OMDbAPI from './OMDbAPI'\r\nimport {Debounce} from 'react-throttle'\r\nimport {Container, Row, Col, Input} from 'reactstrap'\r\nimport Titles from './Titles'\r\nimport TitleModal from './TitleModal'\r\nimport {BeatLoader} from 'react-spinners';\r\n\r\nclass App extends Component {\r\n    state = {\r\n        currentTitle: '',\r\n        titles: [],\r\n        totalResults: 0,\r\n        activePage: 1,\r\n        totalPages: null,\r\n        apiError: false,\r\n        apiErrorMsg: '',\r\n        searching: false,\r\n        modal: false,\r\n        modalContent: ''\r\n    }\r\n\r\n    // Handle modal on/off\r\n    modalToggle = () => {\r\n        this.setState({\r\n            modal: !this.state.modal\r\n        });\r\n    }\r\n\r\n    // Search on OMDb API by title and page\r\n    search = (title, page = 1) => {\r\n\r\n        if (title !== this.state.currentTitle) {\r\n            this.clearContent();\r\n        }\r\n\r\n        if (title) {\r\n            this.setState({currentTitle: title, searching: true});\r\n\r\n            OMDbAPI\r\n                .searchByTitle(title, page)\r\n                .then((result) => {\r\n                    if (result.Response === 'True') {\r\n                        this.setContent(result);\r\n                    } else {\r\n                        this.setError(result)\r\n                    }\r\n                })\r\n                .catch(() => {\r\n                    this.setState({apiError: true, searching: false})\r\n                });\r\n        } else {\r\n            this.clearContent();\r\n            this.setState({searching: false})\r\n        }\r\n    }\r\n\r\n    // Search on OMDb API by imdbID then\r\n    // open a modal with the title content\r\n    getTitleInfo = (imdbID) => {\r\n        OMDbAPI\r\n            .searchByID(imdbID)\r\n            .then((result) => {\r\n                if (result.Response === 'True') {\r\n                    this.setState({modalContent: result, modal: true});\r\n                } else {\r\n                    this.setError(result)\r\n                }\r\n            })\r\n            .catch(() => {\r\n                this.setState({apiError: true, searching: false})\r\n            });\r\n    }\r\n\r\n    // Set the state to create a grid of 'movies'\r\n    // or clear/reset the state if there is no search result\r\n    setContent = (result) => {\r\n        if (result.totalResults) {\r\n            this.setState({\r\n                titles: result.Search,\r\n                totalResults: result.totalResults,\r\n                totalPages: (result.totalResults / 10),\r\n                searching: false\r\n            });\r\n        } else {\r\n            this.clearContent();\r\n        }\r\n    }\r\n\r\n    // Clear/reset the state\r\n    clearContent = () => {\r\n        this.setState({\r\n            currentTitle: '',\r\n            titles: [],\r\n            totalResults: 0,\r\n            activePage: 1,\r\n            totalPages: null,\r\n            searching: false,\r\n            apiError: false,\r\n            apiErrorMsg: ''\r\n        });\r\n    }\r\n\r\n    // Set erros from OMDb API\r\n    setError = (result) => {\r\n        this.setState({apiError: true, apiErrorMsg: result.Error, searching: false})\r\n    }\r\n\r\n    // Handle pagination component change\r\n    handlePageChange = (pageNumber) => {\r\n        this.setState({activePage: pageNumber});\r\n        this.search(this.state.currentTitle, pageNumber);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container className=\"py-5\">\r\n                <h1 className=\"text-center\">OMDB search</h1>\r\n                <Row className=\"my-3\">\r\n                    <Col>\r\n                        <Debounce time=\"400\" handler=\"onChange\">\r\n                            <Input\r\n                                bsSize=\"lg\"\r\n                                placeholder=\"Search movie, series or episodes\"\r\n                                aria-label=\"Type a movie, series or episode name to search\"\r\n                                onChange={(event) => this.search(event.target.value)}/>\r\n                        </Debounce>\r\n                    </Col>\r\n                </Row>\r\n\r\n                {/* Search loading icon */}\r\n                <div className=\"text-center\">\r\n                    <BeatLoader\r\n                        sizeUnit={\"px\"}\r\n                        size={30}\r\n                        color={'#D8DBE2'}\r\n                        loading={this.state.searching}/>\r\n                </div>\r\n\r\n                {/* List of titles and pagination */}\r\n                {this.state.currentTitle && !this.state.searching && <Titles\r\n                    titles={this.state.titles}\r\n                    onGetInfo={this.getTitleInfo}\r\n                    error={this.state.apiErrorMsg}\r\n                    activePage={this.state.activePage}\r\n                    totalItemsCount={this.state.totalResults}\r\n                    onPageChange={this.handlePageChange}\r\n                    error={this.state.apiErrorMsg}/>\r\n                }\r\n\r\n                {this.state.modal && <TitleModal\r\n                    title={this.state.modalContent}\r\n                    isOpen={this.state.modal}\r\n                    onToggle={this.modalToggle}/>\r\n                }\r\n\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}