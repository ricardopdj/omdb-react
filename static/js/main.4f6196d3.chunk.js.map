{"version":3,"sources":["OMDbAPI.js","Titles.js","TitleModal.js","App.js","serviceWorker.js","index.js"],"names":["api","searchByTitle","title","page","fetch","concat","then","res","json","catch","err","searchByID","id","Titles","_React$createElement","_this","this","_this$props","props","titles","activePage","totalItemsCount","error","react_default","a","createElement","Row","className","Col","react_csv","data","map","index","key","sm","Card","onClick","onGetInfo","imdbID","CardImg","top","src","Poster","alt","Title","CardBody","CardText","Pagination_default","itemsCountPerPage","pageRangeDisplayed","onChange","onPageChange","bind","itemClass","linkClass","activeLinkClass","prevPageText","nextPageText","Object","defineProperty","Component","TitleModal","toggle","onToggle","isOpen","Modal","ModalHeader","ModalBody","Plot","Director","Actors","Genre","Released","Runtime","Country","Ratings","rating","Source","Value","href","target","rel","ModalFooter","Button","color","App","state","currentTitle","totalResults","totalPages","apiError","apiErrorMsg","searching","modal","modalContent","modalToggle","setState","search","arguments","length","undefined","clearContent","OMDbAPI","result","Response","setContent","setError","getTitleInfo","Search","Error","handlePageChange","pageNumber","_this2","Container","lib","time","handler","Input","bsSize","placeholder","aria-label","event","value","react_spinners","sizeUnit","size","loading","src_Titles","src_TitleModal","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4f6196d3.chunk.js","sourcesContent":["const api = \"https://www.omdbapi.com/?apikey=576f8801\";\r\n\r\nexport const searchByTitle = (title, page) => fetch(`${api}&s=${title}&page=${page}`)\r\n    .then(res => res.json())\r\n    .catch(err => {\r\n        throw err\r\n    });\r\n\r\nexport const searchByID = (id) => fetch(`${api}&i=${id}`)\r\n    .then(res => res.json())\r\n    .catch(err => {\r\n        throw err\r\n    });\r\n","import React, {Component} from 'react'\nimport {\n    Row,\n    Col,\n    Card,\n    CardText,\n    CardImg,\n    CardBody\n} from 'reactstrap';\nimport Pagination from \"react-js-pagination\"\nimport {CSVLink} from \"react-csv\";\n\nclass Titles extends Component {\n\n    render() {\n        const {titles, activePage, totalItemsCount, error} = this.props\n\n        return (\n            <div>\n                {/* CSV export Component */}\n                {!error && <Row className=\"mb-3\">\n                    <Col>\n                        <CSVLink data={titles} className=\"btn bg-secondary\">Export to CSV</CSVLink>\n                    </Col>\n                </Row>\n}\n\n                <Row>\n                    {/* Show Titles as Cards */}\n                    {titles.map((title, index) => <Col key={index} sm=\"3\" className=\"mb-5\">\n                        <Card className=\"title\" onClick={() => this.props.onGetInfo(title.imdbID)}>\n                            <CardImg className=\"img-fluid\" top src={title.Poster} alt={title.Title}/>\n\n                            <CardBody className=\"d-flex align-items-end\">\n                                <CardText className=\"title-name\">{title.Title}</CardText>\n                            </CardBody>\n                        </Card>\n                    </Col>)\n}\n\n                    {/* Show Api error messages */}\n                    {error && <Col>{error}</Col>}\n                </Row>\n\n                {/* Pagination */}\n                {totalItemsCount > 0 && <Row>\n                    <Col>\n                        <Pagination\n                            activePage={activePage}\n                            itemsCountPerPage={10}\n                            totalItemsCount={totalItemsCount}\n                            pageRangeDisplayed={5}\n                            onChange={this\n                            .props\n                            .onPageChange\n                            .bind(this)}\n                            itemClass=\"page-item\"\n                            linkClass=\"page-link\"\n                            activeLinkClass=\"active\"\n                            prevPageText=\"Prev\"\n                            nextPageText=\"Next\"\n                            pageRangeDisplayed=\"5\"\n                            hideDisabled={true}/>\n                    </Col>\n                </Row>\n}\n            </div>\n\n        )\n    }\n}\n\nexport default Titles","import React, {Component} from 'react'\nimport {Button, Modal, ModalHeader, ModalBody, ModalFooter} from 'reactstrap'\n\nclass TitleModal extends Component {\n\n    toggle = () => {\n        this\n            .props\n            .onToggle()\n    }\n\n    render() {\n        const {isOpen, title} = this.props\n\n        return (\n            <Modal isOpen={isOpen} toggle={this.toggle} className={this.props.className}>\n                <ModalHeader toggle={this.toggle}>{title.Title}</ModalHeader>\n                <ModalBody>\n                    <div className=\"text-center title\">\n                        {title.Poster !== 'N/A' && <img src={title.Poster} alt={title.Title} className=\"mb-3\"/>}\n                    </div>\n                    <div className=\"px-3\">\n                        <p>\n                            <strong>Plot</strong><br/>{title.Plot}</p>\n                        <p>\n                            <strong>Director</strong><br/>{title.Director}</p>\n                        <p>\n                            <strong>Actors</strong><br/>{title.Actors}</p>\n                        <p>\n                            <strong>Genre</strong><br/>{title.Genre}</p>\n                        <p>\n                            <strong>Release date</strong><br/>{title.Released}</p>\n                        <p>\n                            <strong>Runtime</strong><br/>{title.Runtime}</p>\n                        <p>\n                            <strong>Country</strong><br/>{title.Country}</p>\n                        <div className=\"pb-3\">\n                            <strong>Ratings</strong><br/> {title\n                                .Ratings\n                                .map((rating, index) => <div key={index}>\n                                    {rating.Source}\n                                    - {rating.Value}\n                                </div>)\n}\n                        </div>\n                        <p>\n                            <strong>On IMDB:</strong><br/>\n                            <a\n                                href={`http://imdb.com/title/${title.imdbID}`}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\">http://imdb.com/title/{title.imdbID}</a>\n                        </p>\n                    </div>\n                </ModalBody>\n                <ModalFooter>\n                    <Button color=\"secondary\" onClick={this.toggle}>Close</Button>\n                </ModalFooter>\n            </Modal>\n        )\n    }\n}\n\nexport default TitleModal","import React, {Component} from 'react'\nimport './App.css'\nimport * as OMDbAPI from './OMDbAPI'\nimport {Debounce} from 'react-throttle'\nimport {Container, Row, Col, Input} from 'reactstrap'\nimport Titles from './Titles'\nimport TitleModal from './TitleModal'\nimport {BeatLoader} from 'react-spinners';\n\nclass App extends Component {\n    state = {\n        currentTitle: '',\n        titles: [],\n        totalResults: 0,\n        activePage: 1,\n        totalPages: null,\n        apiError: false,\n        apiErrorMsg: '',\n        searching: false,\n        modal: false,\n        modalContent: ''\n    }\n\n    // Handle modal on/off\n    modalToggle = () => {\n        this.setState({\n            modal: !this.state.modal\n        });\n    }\n\n    // Search on OMDb API by title and page\n    search = (title, page = 1) => {\n\n        if (title !== this.state.currentTitle) {\n            this.clearContent();\n        }\n\n        if (title) {\n            this.setState({currentTitle: title, searching: true});\n\n            OMDbAPI\n                .searchByTitle(title, page)\n                .then((result) => {\n                    if (result.Response === 'True') {\n                        this.setContent(result);\n                    } else {\n                        this.setError(result)\n                    }\n                })\n                .catch(() => {\n                    this.setState({apiError: true, searching: false})\n                });\n        } else {\n            this.clearContent();\n            this.setState({searching: false})\n        }\n    }\n\n    // Search on OMDb API by imdbID then\n    // open a modal with the title content\n    getTitleInfo = (imdbID) => {\n        OMDbAPI\n            .searchByID(imdbID)\n            .then((result) => {\n                if (result.Response === 'True') {\n                    this.setState({modalContent: result, modal: true});\n                } else {\n                    this.setError(result)\n                }\n            })\n            .catch(() => {\n                this.setState({apiError: true, searching: false})\n            });\n    }\n\n    // Set the state to create a grid of 'movies'\n    // or clear/reset the state if there is no search result\n    setContent = (result) => {\n        if (result.totalResults) {\n            this.setState({\n                titles: result.Search,\n                totalResults: result.totalResults,\n                totalPages: (result.totalResults / 10),\n                searching: false\n            });\n        } else {\n            this.clearContent();\n        }\n    }\n\n    // Clear/reset the state\n    clearContent = () => {\n        this.setState({\n            currentTitle: '',\n            titles: [],\n            totalResults: 0,\n            activePage: 1,\n            totalPages: null,\n            searching: false,\n            apiError: false,\n            apiErrorMsg: ''\n        });\n    }\n\n    // Set erros from OMDb API\n    setError = (result) => {\n        this.setState({apiError: true, apiErrorMsg: result.Error, searching: false})\n    }\n\n    // Handle pagination component change\n    handlePageChange = (pageNumber) => {\n        this.setState({activePage: pageNumber});\n        this.search(this.state.currentTitle, pageNumber);\n    }\n\n    render() {\n        return (\n            <Container className=\"py-5\">\n                <h1 className=\"text-center\">OMDB search</h1>\n                <Row className=\"my-3\">\n                    <Col>\n                        <Debounce time=\"400\" handler=\"onChange\">\n                            <Input\n                                bsSize=\"lg\"\n                                placeholder=\"Search movie, series or episodes\"\n                                aria-label=\"Type a movie, series or episode name to search\"\n                                onChange={(event) => this.search(event.target.value)}/>\n                        </Debounce>\n                    </Col>\n                </Row>\n\n                {/* Search loading icon */}\n                <div className=\"text-center\">\n                    <BeatLoader\n                        sizeUnit={\"px\"}\n                        size={30}\n                        color={'#D8DBE2'}\n                        loading={this.state.searching}/>\n                </div>\n\n                {/* List of titles and pagination */}\n                {this.state.currentTitle && !this.state.searching && <Titles\n                    titles={this.state.titles}\n                    onGetInfo={this.getTitleInfo}\n                    error={this.state.apiErrorMsg}\n                    activePage={this.state.activePage}\n                    totalItemsCount={this.state.totalResults}\n                    onPageChange={this.handlePageChange}\n                    error={this.state.apiErrorMsg}/>\n}\n\n                {this.state.modal && <TitleModal\n                    title={this.state.modalContent}\n                    isOpen={this.state.modal}\n                    onToggle={this.modalToggle}/>\n}\n\n            </Container>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}