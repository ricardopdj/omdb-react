{"version":3,"sources":["OMDbAPI.js","Titles.js","TitleModal.js","App.js","serviceWorker.js","index.js"],"names":["searchByTitle","title","page","fetch","concat","then","res","json","catch","err","Titles","_React$createElement","_this","this","_this$props","props","titles","activePage","totalItemsCount","error","react_default","a","createElement","Row","map","index","Col","key","sm","className","Card","onClick","onGetInfo","Poster","CardImg","top","src","alt","Title","CardBody","CardText","Pagination_default","itemsCountPerPage","pageRangeDisplayed","onChange","onPageChange","bind","itemClass","linkClass","activeLinkClass","prevPageText","nextPageText","Object","defineProperty","Component","TitleModal","toggle","onToggle","isOpen","Modal","ModalHeader","ModalBody","Year","ModalFooter","Button","color","App","state","currentTitle","totalResults","totalPages","apiError","apiErrorMsg","searching","modal","modalContent","modalToggle","setState","search","arguments","length","undefined","clearContent","OMDbAPI","result","Response","setContent","setError","Search","Error","handlePageChange","pageNumber","getTitleInfo","console","log","_this2","Container","lib","time","handler","Input","bsSize","placeholder","aria-label","event","target","value","react_spinners","sizeUnit","size","loading","src_Titles","src_TitleModal","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.099f147b.chunk.js","sourcesContent":["const api = \"https://www.omdbapi.com/?apikey=576f8801\";\r\n\r\nexport const searchByTitle = (title, page) => fetch(`${api}&s=${title}&page=${page}`)\r\n    .then(res => res.json())\r\n    .catch(err => { throw err });\r\n","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport {\n  Row,\n  Col,\n  Card,\n  CardText,\n  CardImg,\n  CardBody\n} from 'reactstrap';\nimport Pagination from \"react-js-pagination\"\n\nclass Titles extends Component {\n\n    render() {\n      const {\n        titles,\n        activePage,\n        totalItemsCount,\n        error\n      } = this.props\n\n      return (\n        <div>\n        <Row>\n          {/* Show Titles as Cards */}\n          {\n            titles.map((title, index) =>\n            <Col key={index} sm=\"3\" className=\"mb-5\">\n                <Card className=\"title\" onClick={() => this.props.onGetInfo(title)}>\n                    {\n                      title.Poster !== 'N/A' ? (\n                        <CardImg className=\"img-fluid\" top src={title.Poster} alt={title.Title}/>\n                      ) : (\n                        <div className=\"py-5 text-center\">\n                          <span>Sorry, no image found!</span>\n                        </div>\n                      )\n                    }\n                    <CardBody className=\"d-flex align-items-end\">\n                        <CardText className=\"title-name\">{title.Title}</CardText>\n                    </CardBody>\n                </Card>\n            </Col>\n            )\n          }\n\n          {/* Show Api error messages */}\n          { error && <Col>{error}</Col> }\n        </Row>\n\n        {/* Pagination */}\n        {\n          totalItemsCount > 0 &&\n          <Row>\n              <Col>\n                  <Pagination\n                    activePage={activePage}\n                    itemsCountPerPage={10}\n                    totalItemsCount={totalItemsCount}\n                    pageRangeDisplayed={5}\n                    onChange={this.props.onPageChange.bind(this)}\n                    itemClass=\"page-item\"\n                    linkClass=\"page-link\"\n                    activeLinkClass=\"active\"\n                    prevPageText=\"Prev\"\n                    nextPageText=\"Next\"\n                    pageRangeDisplayed=\"5\"\n                    hideDisabled={true}\n                  />\n              </Col>\n          </Row>\n          }\n        </div>\n\n      )\n    }\n}\n\n// Titles.propTypes = {\n//     venues: PropTypes.array.isRequired,\n//     onSearch: PropTypes.func.isRequired,\n//     onGetInfo: PropTypes.func.isRequired\n// }\n\nexport default Titles","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport {\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter\n} from 'reactstrap'\n\nclass TitleModal extends Component {\n\n    toggle = () => {\n        this.props.onToggle()\n    }\n\n    render() {\n        const { isOpen, title } = this.props\n\n        return (\n          <Modal isOpen={isOpen} toggle={this.toggle} className={this.props.className}>\n            <ModalHeader toggle={this.toggle}>{title.Title}</ModalHeader>\n            <ModalBody>\n                <div className=\"text-center\">\n                  <img src={title.Poster} alt={title.Title}/>\n                </div>\n                <div className=\"my-5\">\n                  <p>Release date: {title.Year}</p>\n                </div>\n\n            </ModalBody>\n            <ModalFooter>\n                <Button color=\"primary\" onClick={this.toggle}>Do Something</Button>{' '}\n                <Button color=\"secondary\" onClick={this.toggle}>Cancel</Button>\n            </ModalFooter>\n        </Modal>\n        )\n    }\n}\n\nexport default TitleModal","import React, {Component} from 'react'\nimport './App.css'\nimport * as OMDbAPI from './OMDbAPI'\nimport {Debounce} from 'react-throttle'\nimport {\n    Container,\n    Row,\n    Col,\n    Input\n} from 'reactstrap'\nimport Titles from './Titles'\nimport TitleModal from './TitleModal'\nimport { BeatLoader } from 'react-spinners';\n\nclass App extends Component {\n    state = {\n        currentTitle: '',\n        titles: [],\n        totalResults: 0,\n        activePage: 1,\n        totalPages: null,\n        apiError: false,\n        apiErrorMsg: '',\n        searching: false,\n        modal: false,\n        modalContent: ''\n    }\n\n    // this.toggle = this.toggle.bind(this);\n\n    modalToggle = () => {\n        this.setState({modal: !this.state.modal});\n    }\n\n    search = (title, page = 1) => {\n\n        if (title !== this.state.currentTitle) {\n            this.clearContent();\n        }\n\n        if (title) {\n            this.setState({currentTitle: title, searching: true});\n\n            OMDbAPI\n                .searchByTitle(title, page)\n                .then((result) => {\n                    if (result.Response === 'True') {\n                        this.setContent(result);\n                    } else {\n                        this.setError(result)\n                    }\n                })\n                .catch(() => {\n                    this.setState({apiError: true, searching: false})\n                });\n        } else {\n            this.clearContent();\n            this.setState({searching: false})\n        }\n\n    }\n\n    setContent = (result) => {\n        if (result.totalResults) {\n            this.setState({\n                titles: result.Search,\n                totalResults: result.totalResults,\n                totalPages: (result.totalResults / 10),\n                searching: false\n            });\n        } else {\n            this.clearContent();\n        }\n    }\n\n    clearContent = () => {\n        this.setState({\n            currentTitle: '',\n            titles: [],\n            totalResults: 0,\n            activePage: 1,\n            totalPages: null,\n            searching: false,\n            apiError: false,\n            apiErrorMsg: ''\n        });\n    }\n\n    setError = (result) => {\n        this.setState({apiError: true, apiErrorMsg: result.Error, searching: false})\n    }\n\n    handlePageChange = (pageNumber) => {\n        this.setState({activePage: pageNumber});\n        this.search(this.state.currentTitle, pageNumber);\n    }\n\n    getTitleInfo = (title) => {\n      console.log(title);\n\n        this.setState({\n            modalContent: title,\n            modal: true\n        })\n    }\n\n    render() {\n        return (\n            <Container className=\"py-5\">\n                <h1 className=\"text-center\">OMDB search</h1>\n                <Row className=\"mt-3 mb-5\">\n                    <Col>\n                        <Debounce time=\"400\" handler=\"onChange\">\n                            <Input\n                                bsSize=\"lg\"\n                                placeholder=\"Search movie, series or episodes\"\n                                aria-label=\"Type a movie, series or episode name to search\"\n                                onChange={(event) => this.search(event.target.value)}/>\n                        </Debounce>\n                    </Col>\n                </Row>\n\n                {/* Search loading icon */}\n                <div className=\"text-center\">\n                    <BeatLoader\n                    sizeUnit={\"px\"}\n                    size={30}\n                    color={'#D8DBE2'}\n                    loading={this.state.searching}\n                    />\n                </div>\n\n                {/* List of titles and pagination */}\n                {\n                    this.state.currentTitle &&\n                    !this.state.searching &&\n                    <Titles\n                        titles={this.state.titles}\n                        onGetInfo={this.getTitleInfo}\n                        error={this.state.apiErrorMsg}\n                        activePage={this.state.activePage}\n                        totalItemsCount={this.state.totalResults}\n                        onPageChange={this.handlePageChange}\n                        error={this.state.apiErrorMsg}\n                    />\n                }\n\n                {\n                  this.state.modal &&\n                  <TitleModal\n                      title={this.state.modalContent}\n                      isOpen={this.state.modal}\n                      onToggle={this.modalToggle}\n                  />\n                }\n\n            </Container>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}